package com.gmail.water;import android.os.Bundle;import android.util.Log;import android.view.LayoutInflater;import android.view.View;import android.view.ViewGroup;import android.widget.Toast;import androidx.annotation.NonNull;import androidx.annotation.Nullable;import androidx.fragment.app.Fragment;import com.dinuscxj.progressbar.CircleProgressBar;import com.github.mikephil.charting.charts.BarChart;import com.github.mikephil.charting.components.XAxis;import com.github.mikephil.charting.components.YAxis;import com.github.mikephil.charting.data.BarData;import com.github.mikephil.charting.data.BarDataSet;import com.github.mikephil.charting.data.BarEntry;import com.google.android.gms.tasks.OnCompleteListener;import com.google.android.gms.tasks.OnFailureListener;import com.google.android.gms.tasks.OnSuccessListener;import com.google.android.gms.tasks.Task;import com.google.android.material.snackbar.Snackbar;import com.google.firebase.database.ChildEventListener;import com.google.firebase.database.DataSnapshot;import com.google.firebase.database.DatabaseError;import com.google.firebase.database.DatabaseReference;import com.google.firebase.database.FirebaseDatabase;import com.google.firebase.database.ValueEventListener;import com.google.firebase.firestore.DocumentReference;import com.google.firebase.firestore.DocumentSnapshot;import com.google.firebase.firestore.FirebaseFirestore;import org.greenrobot.eventbus.EventBus;import org.greenrobot.eventbus.Subscribe;import org.greenrobot.eventbus.ThreadMode;import java.util.ArrayList;import java.util.Arrays;import java.util.Calendar;import java.util.HashMap;import java.util.List;import java.util.Map;import devs.mulham.horizontalcalendar.HorizontalCalendar;import devs.mulham.horizontalcalendar.utils.HorizontalCalendarListener;public class LogFragment extends Fragment {    public static final String TAG = "LogFragment";    View v;    public static int today_intake;    //파이어베이스    private FirebaseDatabase myDatabase = FirebaseDatabase.getInstance();    private DatabaseReference myRef = myDatabase.getReference("user_name");    static Map<String, Object> data = new HashMap<>();    //그래프    BarChart barChart;    ArrayList<BarEntry> water_data;    //달력    private HorizontalCalendar horizontalCalendar;    int year, month, day;    //circle progress    CircleProgressBar water_circle;    CircleProgressBar calorie_circle;    CircleProgressBar caffeine_circle;    CircleProgressBar protein_circle;    CircleProgressBar sugar_circle;    CircleProgressBar natrium_circle;    CircleProgressBar fat_circle;    public LogFragment(){    }    @Nullable    @Override    public View onCreateView(@NonNull LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) {        v = inflater.inflate(R.layout.fragment_log, container, false);        super.onCreate(savedInstanceState);        int water_amount = 2000;        //eventBus        try {            EventBus.getDefault().register(this);        }catch (Exception e){}        //bar chart        barChart = v.findViewById(R.id.barChart);        //circlebar 설정        calorie_circle = v.findViewById(R.id.calorie_circlebar);        caffeine_circle = v.findViewById(R.id.caffeine_circlebar);        protein_circle = v.findViewById(R.id.protein_circlebar);        sugar_circle = v.findViewById(R.id.sugar_circlebar);        natrium_circle = v.findViewById(R.id.natrium_circlebar);        fat_circle = v.findViewById(R.id.fat_circlebar);        water_circle = v.findViewById(R.id.water_circlebar);        //달력        Calendar endDate = Calendar.getInstance();        endDate.add(Calendar.MONTH, 1); //종료날짜(현재날짜 + 1달후)        Calendar startDate = Calendar.getInstance();        startDate.add(Calendar.MONTH, -1); //시작날짜        //날짜 설정        year = startDate.get(Calendar.YEAR);        month = startDate.get(Calendar.MONTH)+2;        day = startDate.get(Calendar.DAY_OF_MONTH);        String today = String.valueOf(year) + String.valueOf(month) + String.valueOf(day);        //realtime 파이어베이스        IntakeData todayData = new IntakeData();        write_Intake(today_intake, today);        read_Intake(todayData, today);        calorie_circle.setMax(2000);        caffeine_circle.setMax(400);        protein_circle.setMax(2000);        sugar_circle.setMax(20);        natrium_circle.setMax(400);        fat_circle.setMax(15);        water_circle.setMax(water_amount);        //초기 circleprogressbar        calorie_circle.setProgress(todayData.getCalorie());        caffeine_circle.setProgress(todayData.getCaffeine());        protein_circle.setProgress(todayData.getProtein());        sugar_circle.setProgress(todayData.getSugar());        natrium_circle.setProgress(todayData.getNatrium());        fat_circle.setProgress(todayData.getFat());        water_circle.setProgress(todayData.getWater());        /*myRef.child("water").addListenerForSingleValueEvent(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot snapshot) {                Log.d(TAG, String.valueOf(snapshot.getValue()));            }            @Override            public void onCancelled(@NonNull DatabaseError error) {            }        });*/        //샘플        water_data = new ArrayList<>();        water_data.add(new BarEntry(day-4, 900));        water_data.add(new BarEntry(day-3, 1000));        water_data.add(new BarEntry(day-2, 1500));        water_data.add(new BarEntry(day-1, 1000));        water_data.add(new BarEntry(day, todayData.getWater()));        BarDataSet barDataSet = new BarDataSet(water_data, "Water");        BarData barData = new BarData(barDataSet);        barChart.setFitBars(true);        barChart.setData(barData);        barChart.getDescription().setEnabled(false);        barChart.animateY(2000);        // 차트 회색 배경 설정 (default = false)        barChart.setDrawGridBackground(false);        // 막대 그림자 설정 (default = false)        barChart.setDrawBarShadow(false);        // 차트 테두리 설정 (default = false)        barChart.setDrawBorders(false);        XAxis barXAxis = barChart.getXAxis();        //barXAxis.setEnabled(false);        YAxis barLAxis = barChart.getAxisLeft();        barLAxis.setEnabled(false);        YAxis barRAxis = barChart.getAxisRight();        barRAxis.setEnabled(false);        final Calendar defaultDate = Calendar.getInstance();        defaultDate.add(Calendar.MONTH, -2);        //달력 실행        horizontalCalendar = new HorizontalCalendar.Builder(v, R.id.calendarView)                .configure()                .textSize(10,19,13)                .end()                /*.defaultSelectedDate(defaultDate)*/                .range(defaultDate, endDate)                .datesNumberOnScreen(5)                .build();        //날짜 선택 event        horizontalCalendar.setCalendarListener(new HorizontalCalendarListener() {            @Override            public void onDateSelected(Calendar date, int position) {                String selected = String.valueOf( date.get(Calendar.YEAR)) + String.valueOf( date.get(Calendar.MONTH)+1) + String.valueOf( date.get(Calendar.DAY_OF_MONTH));                Log.d(TAG, "오늘 날짜: " + selected);                try {                    myRef.child(selected).addListenerForSingleValueEvent(new ValueEventListener() {                        @Override                        public void onDataChange(@NonNull DataSnapshot snapshot) {                            if(snapshot.exists()){                                IntakeData selectDayData = snapshot.getValue(IntakeData.class);                                calorie_circle.setProgress(selectDayData.getCalorie());                                caffeine_circle.setProgress(selectDayData.getCaffeine());                                protein_circle.setProgress(selectDayData.getProtein());                                sugar_circle.setProgress(selectDayData.getSugar());                                natrium_circle.setProgress(selectDayData.getNatrium());                                fat_circle.setProgress(selectDayData.getFat());                                water_circle.setProgress(selectDayData.getWater());                            } else {                                Toast.makeText(getContext(), "데이터가 없습니다.", Toast.LENGTH_SHORT).show();                                calorie_circle.setProgress(0);                                caffeine_circle.setProgress(0);                                protein_circle.setProgress(0);                                sugar_circle.setProgress(0);                                natrium_circle.setProgress(0);                                fat_circle.setProgress(0);                                water_circle.setProgress(0);                            }                        }                        @Override                        public void onCancelled(@NonNull DatabaseError error) {                            Log.d(TAG, "onCanclled()");                        }                    });                } catch (Exception e){                    Log.d(TAG, "데이터가 없습니다.");                }            }        });        return v;    }    private void write_Intake(int water, String today){        IntakeData intake = new IntakeData(water);        myRef.child(today).setValue(intake)                .addOnSuccessListener(new OnSuccessListener<Void>() {                    @Override                    public void onSuccess(Void unused) {                        Log.d(TAG, "저장완료");                    }                })                .addOnFailureListener(new OnFailureListener() {                    @Override                    public void onFailure(@NonNull Exception e) {                        Log.d(TAG, "저장실패");                    }                });    }    private void read_Intake(IntakeData dayData, String today){        myRef.child(today).addValueEventListener(new ValueEventListener() {            @Override            public void onDataChange(@NonNull DataSnapshot snapshot) {                if(snapshot.exists()){                    IntakeData dayData = snapshot.getValue(IntakeData.class);                } else {                    Log.d(TAG, "데이터가 없습니다.");                }            }            @Override            public void onCancelled(@NonNull DatabaseError error) {                Log.d(TAG, "onCancelled()");            }        });    }    @Subscribe(threadMode = ThreadMode.MAIN)    public void callEventBus(MainActivity.DataEvent event){        String rData;        String temData;        String weiData;        Log.d(TAG, event.eventBus);        rData = event.eventBus;        String[] splitData = rData.split(",");        temData = splitData[0];        weiData = splitData[1];        Double weiDouble = Double.parseDouble(weiData);        int weight = (int) ((weiDouble+0.01)*1000);        today_intake += weight;        write_Intake(today_intake, "20221116");    }}